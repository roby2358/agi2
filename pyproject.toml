[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agi2"
version = "0.1.0"
description = "A Python project for training GPT-2 models"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11,<3.13"
keywords = ["gpt2", "transformer", "language-model", "deep-learning", "nlp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core ML dependencies
    "torch>=2.0.0",
    
    # Data processing
    "numpy>=1.21.0",
    
    # Configuration and utilities
    "pyyaml>=6.0",
    "tqdm>=4.64.0",
    "rich>=12.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    
    # Documentation
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    
    # Jupyter support
    "jupyter>=1.0.0",
    "notebook>=6.5.0",
    "ipykernel>=6.0.0",
    "ipywidgets>=8.0.0",
]

# Optional dependency groups - uncomment as needed
# distributed = [
#     "deepspeed>=0.9.0",
#     "fairscale>=0.4.13",
# ]

# vision = [
#     "pillow>=9.0.0",
#     "opencv-python>=4.7.0",
#     "torchvision>=0.15.0",
# ]

# audio = [
#     "librosa>=0.10.0",
#     "soundfile>=0.12.0",
#     "torchaudio>=2.0.0",
# ]

# all = [
#     "agi2[dev,distributed,vision,audio]"
# ]

[project.urls]
Homepage = "https://github.com/yourusername/agi2"
Documentation = "https://agi2.readthedocs.io/"
Repository = "https://github.com/yourusername/agi2.git"
"Bug Tracker" = "https://github.com/yourusername/agi2/issues"

# CLI scripts - uncomment when CLI modules are created
# [project.scripts]
# agi2-train = "src.cli.train:main"
# agi2-eval = "src.cli.evaluate:main"
# agi2-generate = "src.cli.generate:main"
# agi2-preprocess = "src.cli.preprocess:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"src" = ["**/*.yaml", "**/*.json", "**/*.txt"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
